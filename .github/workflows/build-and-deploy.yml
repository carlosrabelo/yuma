name: Build Firmware and Deploy

on:
  push:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'platformio.ini'
      - 'scripts/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Setup PlatformIO configuration
      run: |
        echo "ðŸ”§ Setting up PlatformIO configuration..."
        cp templates/platformio.ini.template platformio.ini
        echo "âœ“ platformio.ini created from template"
        ls -la platformio.ini

    - name: Build ESP32 Standard
      run: |
        echo "ðŸ”§ Building ESP32 Standard..."
        make build BOARD=esp32

    - name: Build ESP32 OLED
      run: |
        echo "ðŸ”§ Building ESP32 OLED..."
        make build BOARD=esp32_oled

    - name: Build ESP8266 Standard
      run: |
        echo "ðŸ”§ Building ESP8266 Standard..."
        make build BOARD=esp8266

    - name: Build ESP8266 OLED
      run: |
        echo "ðŸ”§ Building ESP8266 OLED..."
        make build BOARD=esp8266_oled

    - name: Generate firmware assets
      run: |
        echo "ðŸ“¦ Generating firmware assets..."
        make assets
        echo "ðŸ“‹ Assets generation completed. Checking results:"
        echo "Assets directory structure:"
        find assets -type f -name "*.bin" -o -name "*.json" | sort
        echo "Manifest content:"
        cat assets/manifest.json

    - name: Copy assets to docs
      run: |
        echo "ðŸ“‹ Copying assets to docs for GitHub Pages..."
        echo "Assets directory contents:"
        ls -la assets/
        echo "Copying firmware assets..."
        cp -r assets/firmware docs/
        cp assets/manifest.json docs/
        echo "Final docs directory:"
        ls -la docs/
        echo "Firmware in docs:"
        find docs/firmware -name "*.bin" -exec ls -lh {} \;

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4